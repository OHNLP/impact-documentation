{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI definition",
    "version": "v0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "Project Controller",
      "description": "Operations relating to Project Creation and Management"
    },
    {
      "name": "Cohort Controller",
      "description": "Cohort and Evidence Related Methods, Including Results and Evidence Judgements"
    },
    {
      "name": "Job Controller",
      "description": "Operations relating to Job Creation, Management, and Status"
    }
  ],
  "paths": {
    "/_projects/create": {
      "put": {
        "tags": [
          "Project Controller"
        ],
        "summary": "Creates a new project with the given name with the calling user set to owner",
        "operationId": "createProject",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        }
      }
    },
    "/_projects/roles": {
      "post": {
        "tags": [
          "Project Controller"
        ],
        "summary": "Sets the given project authority/role grant",
        "operationId": "setUserRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/_projects/rename": {
      "post": {
        "tags": [
          "Project Controller"
        ],
        "summary": "Renames the project associated with the given project UID to the given name",
        "operationId": "renameProject",
        "parameters": [
          {
            "name": "project_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        }
      }
    },
    "/_projects/criterion": {
      "get": {
        "tags": [
          "Project Controller"
        ],
        "summary": "Gets the current (latest) revision of a criterion associated with a given project UID. ",
        "description": "Note that for jobs, the associated method under /_cohorts should be called instead using job UID as a parameter as the criterion associated with a prior job may be different from the latest revision",
        "operationId": "getProjectCriterion",
        "parameters": [
          {
            "name": "project_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Criterion"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project Controller"
        ],
        "summary": "Updates the criterion associated with a given project UID",
        "operationId": "writeProjectCriterion",
        "parameters": [
          {
            "name": "project_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Criterion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/_jobs/create": {
      "post": {
        "tags": [
          "Job Controller"
        ],
        "summary": "Queues a new job for the given project UID",
        "operationId": "createJob",
        "parameters": [
          {
            "name": "project_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          }
        }
      }
    },
    "/_jobs/cancel": {
      "post": {
        "tags": [
          "Job Controller"
        ],
        "summary": "Cancels the job associated with the given job UID",
        "operationId": "cancelJob",
        "parameters": [
          {
            "name": "job_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/_cohorts/relevance": {
      "get": {
        "tags": [
          "Cohort Controller"
        ],
        "summary": "Gets current inclusion status for the given job and list of candidate patient UIDs",
        "operationId": "getCohortRelevance",
        "parameters": [
          {
            "name": "job_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "patient_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string",
                    "enum": [
                      "UNJUDGED",
                      "INCLUDE",
                      "EXCLUDE"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cohort Controller"
        ],
        "summary": "Writes current inclusion status for the given job and candidate patient UID",
        "operationId": "writeCohortRelevance",
        "parameters": [
          {
            "name": "job_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "patient_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "judgement",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "UNJUDGED",
                "INCLUDE",
                "EXCLUDE"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/_cohorts/evidence_relevance": {
      "get": {
        "tags": [
          "Cohort Controller"
        ],
        "summary": "Gets match judgement (if present), or algorithmicly determined judgement for a given list of evidence UIDs associated with a given job and criterion (node) UID",
        "operationId": "getEvidenceRelevance",
        "parameters": [
          {
            "name": "job_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "node_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "evidence_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string",
                    "enum": [
                      "JUDGED_MATCH",
                      "JUDGED_MISMATCH",
                      "EVIDENCE_FOUND",
                      "EVIDENCE_FOUND_NLP",
                      "NO_EVIDENCE_FOUND",
                      "UNJUDGED"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cohort Controller"
        ],
        "summary": "Writes match judgement for a given evidence UID associated with a given job and criterion (node) UID",
        "operationId": "writeEvidenceRelevance",
        "parameters": [
          {
            "name": "job_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "node_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "evidence_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "judgement",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "JUDGED_MATCH",
                "JUDGED_MISMATCH",
                "EVIDENCE_FOUND",
                "EVIDENCE_FOUND_NLP",
                "NO_EVIDENCE_FOUND",
                "UNJUDGED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/_cohorts/criterion_match_status": {
      "get": {
        "tags": [
          "Cohort Controller"
        ],
        "summary": "Gets match judgement (if present), or algorithmicly determined judgement for all nodes of the Criterion associated with the given job UID",
        "operationId": "getCriterionMatchStatus",
        "parameters": [
          {
            "name": "job_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "person_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/CriterionInfo"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cohort Controller"
        ],
        "summary": "Writes criterion match judgement for the given job, person, and criterion (node) UID",
        "operationId": "setCriterionMatchStatus",
        "parameters": [
          {
            "name": "job_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "node_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "person_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CriterionInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/CriterionInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_projects/": {
      "get": {
        "tags": [
          "Project Controller"
        ],
        "summary": "Gets listing of projects to which the calling user has read access",
        "operationId": "getProjectList",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_jobs/user": {
      "get": {
        "tags": [
          "Job Controller"
        ],
        "summary": "Gets a listing of jobs associated to the calling user, sorted by date in descending order",
        "operationId": "getJobsForUser",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_jobs/project": {
      "get": {
        "tags": [
          "Job Controller"
        ],
        "summary": "Gets a listing of jobs associated with the given project UID, sorted by date in descending order",
        "operationId": "getJobsByProject",
        "parameters": [
          {
            "name": "project_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_cohorts/node_evidence": {
      "get": {
        "tags": [
          "Cohort Controller"
        ],
        "summary": "Get a Listing of Evidence for a given Job/Patient on a Specific Criterion (node) UID",
        "operationId": "getEvidenceForNode",
        "parameters": [
          {
            "name": "job_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "node_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "person_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Evidence"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_cohorts/evidencebyuid": {
      "get": {
        "tags": [
          "Cohort Controller"
        ],
        "summary": "Gets the FHIR resources associated with a given set of evidence UIDs",
        "operationId": "getEvidenceByUID",
        "parameters": [
          {
            "name": "evidenceUID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/DomainResource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_cohorts/criterion": {
      "get": {
        "tags": [
          "Cohort Controller"
        ],
        "summary": "Gets the revision of a criterion associated with a given job UID. ",
        "description": "Note that for projects, the associated method under /_projects should be called instead using project UID as a parameter as the criterion associated with a prior job may be different from the latest revision being edited",
        "operationId": "getJobCriterion",
        "parameters": [
          {
            "name": "job_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Criterion"
                }
              }
            }
          }
        }
      }
    },
    "/_cohorts/": {
      "get": {
        "tags": [
          "Cohort Controller"
        ],
        "summary": "Get a Listing of Cohort Candidate by Job UID",
        "operationId": "getRetrievedCohort",
        "parameters": [
          {
            "name": "job_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CohortCandidate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_projects/archive": {
      "delete": {
        "tags": [
          "Project Controller"
        ],
        "summary": "Archives the project associated with the given project UID",
        "operationId": "archiveProject",
        "parameters": [
          {
            "name": "project_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/_jobs/": {
      "delete": {
        "tags": [
          "Job Controller"
        ],
        "summary": "Archives the job associated with the given job UID",
        "operationId": "archiveJob",
        "parameters": [
          {
            "name": "job_uid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Project": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ProjectRole": {
        "type": "object",
        "properties": {
          "userUID": {
            "type": "string"
          },
          "projectUID": {
            "type": "string",
            "format": "uuid"
          },
          "grant": {
            "type": "string",
            "enum": [
              "ADMIN",
              "WRITE",
              "EXECUTE",
              "JUDGE",
              "READ"
            ]
          }
        }
      },
      "Criterion": {
        "required": [
          "class"
        ],
        "type": "object",
        "properties": {
          "nodeUID": {
            "type": "string",
            "format": "uuid"
          },
          "class": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "class"
        }
      },
      "Job": {
        "type": "object",
        "properties": {
          "projectUID": {
            "type": "string",
            "format": "uuid"
          },
          "jobUID": {
            "type": "string",
            "format": "uuid"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "QUEUED",
              "PREFLIGHT",
              "IN_PROGRESS",
              "COMPLETE",
              "ERROR",
              "CANCELED"
            ]
          }
        }
      },
      "CriterionInfo": {
        "type": "object",
        "properties": {
          "judgement": {
            "type": "string",
            "enum": [
              "JUDGED_MATCH",
              "JUDGED_MISMATCH",
              "EVIDENCE_FOUND",
              "EVIDENCE_FOUND_NLP",
              "NO_EVIDENCE_FOUND",
              "UNJUDGED"
            ]
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "Evidence": {
        "type": "object",
        "properties": {
          "evidenceUID": {
            "type": "string"
          },
          "score": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "BooleanType": {
        "type": "object",
        "properties": {
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "extension": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extension"
            }
          },
          "disallowExtensions": {
            "type": "boolean"
          },
          "booleanPrimitive": {
            "type": "boolean"
          },
          "valueAsString": {
            "type": "string"
          },
          "value": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          },
          "primitive": {
            "type": "boolean"
          },
          "extensionFirstRep": {
            "$ref": "#/components/schemas/Extension"
          },
          "idElement": {
            "$ref": "#/components/schemas/StringType"
          },
          "idBase": {
            "type": "string"
          },
          "dateTime": {
            "type": "boolean"
          },
          "resource": {
            "type": "boolean"
          }
        }
      },
      "CanonicalType": {
        "type": "object",
        "properties": {
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "extension": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extension"
            }
          },
          "disallowExtensions": {
            "type": "boolean"
          },
          "valueAsString": {
            "type": "string"
          },
          "primitive": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          },
          "extensionFirstRep": {
            "$ref": "#/components/schemas/Extension"
          },
          "idElement": {
            "$ref": "#/components/schemas/StringType"
          },
          "idBase": {
            "type": "string"
          },
          "booleanPrimitive": {
            "type": "boolean"
          },
          "dateTime": {
            "type": "boolean"
          },
          "resource": {
            "type": "boolean"
          }
        }
      },
      "CodeType": {
        "type": "object",
        "properties": {
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "extension": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extension"
            }
          },
          "disallowExtensions": {
            "type": "boolean"
          },
          "system": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "valueNotNull": {
            "type": "string"
          },
          "valueAsString": {
            "type": "string"
          },
          "primitive": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          },
          "extensionFirstRep": {
            "$ref": "#/components/schemas/Extension"
          },
          "idElement": {
            "$ref": "#/components/schemas/StringType"
          },
          "idBase": {
            "type": "string"
          },
          "booleanPrimitive": {
            "type": "boolean"
          },
          "dateTime": {
            "type": "boolean"
          },
          "resource": {
            "type": "boolean"
          }
        }
      },
      "Coding": {
        "type": "object",
        "properties": {
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "extension": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extension"
            }
          },
          "disallowExtensions": {
            "type": "boolean"
          },
          "system": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "userSelected": {
            "type": "boolean"
          },
          "userSelectedElement": {
            "$ref": "#/components/schemas/BooleanType"
          },
          "versionElement": {
            "$ref": "#/components/schemas/StringType"
          },
          "displayElement": {
            "$ref": "#/components/schemas/StringType"
          },
          "systemElement": {
            "$ref": "#/components/schemas/UriType"
          },
          "codeElement": {
            "$ref": "#/components/schemas/CodeType"
          },
          "empty": {
            "type": "boolean"
          },
          "extensionFirstRep": {
            "$ref": "#/components/schemas/Extension"
          },
          "idElement": {
            "$ref": "#/components/schemas/StringType"
          },
          "idBase": {
            "type": "string"
          },
          "booleanPrimitive": {
            "type": "boolean"
          },
          "dateTime": {
            "type": "boolean"
          },
          "primitive": {
            "type": "boolean"
          },
          "resource": {
            "type": "boolean"
          }
        }
      },
      "DomainResource": {
        "type": "object",
        "properties": {
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "implicitRules": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "text": {
            "$ref": "#/components/schemas/Narrative"
          },
          "contained": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Resource"
            }
          },
          "extension": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extension"
            }
          },
          "modifierExtension": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extension"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "idElement": {
            "$ref": "#/components/schemas/IdType"
          },
          "languageElement": {
            "$ref": "#/components/schemas/CodeType"
          },
          "structureFhirVersionEnum": {
            "type": "string",
            "enum": [
              "DSTU2",
              "DSTU2_HL7ORG",
              "DSTU2_1",
              "DSTU3",
              "R4",
              "R5"
            ]
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "Account",
              "ActivityDefinition",
              "AdverseEvent",
              "AllergyIntolerance",
              "Appointment",
              "AppointmentResponse",
              "AuditEvent",
              "Basic",
              "Binary",
              "BiologicallyDerivedProduct",
              "BodyStructure",
              "Bundle",
              "CapabilityStatement",
              "CarePlan",
              "CareTeam",
              "CatalogEntry",
              "ChargeItem",
              "ChargeItemDefinition",
              "Claim",
              "ClaimResponse",
              "ClinicalImpression",
              "CodeSystem",
              "Communication",
              "CommunicationRequest",
              "CompartmentDefinition",
              "Composition",
              "ConceptMap",
              "Condition",
              "Consent",
              "Contract",
              "Coverage",
              "CoverageEligibilityRequest",
              "CoverageEligibilityResponse",
              "DetectedIssue",
              "Device",
              "DeviceDefinition",
              "DeviceMetric",
              "DeviceRequest",
              "DeviceUseStatement",
              "DiagnosticReport",
              "DocumentManifest",
              "DocumentReference",
              "EffectEvidenceSynthesis",
              "Encounter",
              "Endpoint",
              "EnrollmentRequest",
              "EnrollmentResponse",
              "EpisodeOfCare",
              "EventDefinition",
              "Evidence",
              "EvidenceVariable",
              "ExampleScenario",
              "ExplanationOfBenefit",
              "FamilyMemberHistory",
              "Flag",
              "Goal",
              "GraphDefinition",
              "Group",
              "GuidanceResponse",
              "HealthcareService",
              "ImagingStudy",
              "Immunization",
              "ImmunizationEvaluation",
              "ImmunizationRecommendation",
              "ImplementationGuide",
              "InsurancePlan",
              "Invoice",
              "Library",
              "Linkage",
              "List",
              "Location",
              "Measure",
              "MeasureReport",
              "Media",
              "Medication",
              "MedicationAdministration",
              "MedicationDispense",
              "MedicationKnowledge",
              "MedicationRequest",
              "MedicationStatement",
              "MedicinalProduct",
              "MedicinalProductAuthorization",
              "MedicinalProductContraindication",
              "MedicinalProductIndication",
              "MedicinalProductIngredient",
              "MedicinalProductInteraction",
              "MedicinalProductManufactured",
              "MedicinalProductPackaged",
              "MedicinalProductPharmaceutical",
              "MedicinalProductUndesirableEffect",
              "MessageDefinition",
              "MessageHeader",
              "MolecularSequence",
              "NamingSystem",
              "NutritionOrder",
              "Observation",
              "ObservationDefinition",
              "OperationDefinition",
              "OperationOutcome",
              "Organization",
              "OrganizationAffiliation",
              "Parameters",
              "Patient",
              "PaymentNotice",
              "PaymentReconciliation",
              "Person",
              "PlanDefinition",
              "Practitioner",
              "PractitionerRole",
              "Procedure",
              "Provenance",
              "Questionnaire",
              "QuestionnaireResponse",
              "RelatedPerson",
              "RequestGroup",
              "ResearchDefinition",
              "ResearchElementDefinition",
              "ResearchStudy",
              "ResearchSubject",
              "RiskAssessment",
              "RiskEvidenceSynthesis",
              "Schedule",
              "SearchParameter",
              "ServiceRequest",
              "Slot",
              "Specimen",
              "SpecimenDefinition",
              "StructureDefinition",
              "StructureMap",
              "Subscription",
              "Substance",
              "SubstanceNucleicAcid",
              "SubstancePolymer",
              "SubstanceProtein",
              "SubstanceReferenceInformation",
              "SubstanceSourceMaterial",
              "SubstanceSpecification",
              "SupplyDelivery",
              "SupplyRequest",
              "Task",
              "TerminologyCapabilities",
              "TestReport",
              "TestScript",
              "ValueSet",
              "VerificationResult",
              "VisionPrescription"
            ]
          },
          "idBase": {
            "type": "string"
          },
          "implicitRulesElement": {
            "$ref": "#/components/schemas/UriType"
          },
          "resource": {
            "type": "boolean"
          },
          "booleanPrimitive": {
            "type": "boolean"
          },
          "dateTime": {
            "type": "boolean"
          },
          "primitive": {
            "type": "boolean"
          }
        }
      },
      "EnumFactoryNarrativeStatus": {
        "type": "object"
      },
      "EnumerationNarrativeStatus": {
        "type": "object",
        "properties": {
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "extension": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extension"
            }
          },
          "disallowExtensions": {
            "type": "boolean"
          },
          "system": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "enumFactory": {
            "$ref": "#/components/schemas/EnumFactoryNarrativeStatus"
          },
          "version": {
            "type": "string"
          },
          "valueAsString": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "enum": [
              "GENERATED",
              "EXTENSIONS",
              "ADDITIONAL",
              "EMPTY",
              "NULL"
            ]
          },
          "empty": {
            "type": "boolean"
          },
          "primitive": {
            "type": "boolean"
          },
          "extensionFirstRep": {
            "$ref": "#/components/schemas/Extension"
          },
          "idElement": {
            "$ref": "#/components/schemas/StringType"
          },
          "idBase": {
            "type": "string"
          },
          "booleanPrimitive": {
            "type": "boolean"
          },
          "dateTime": {
            "type": "boolean"
          },
          "resource": {
            "type": "boolean"
          }
        }
      },
      "Extension": {
        "type": "object",
        "properties": {
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "disallowExtensions": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/Type"
          },
          "urlElement": {
            "$ref": "#/components/schemas/UriType"
          },
          "empty": {
            "type": "boolean"
          },
          "valueAsPrimitive": {
            "$ref": "#/components/schemas/IPrimitiveTypeObject"
          },
          "extensionFirstRep": {
            "$ref": "#/components/schemas/Extension"
          },
          "idElement": {
            "$ref": "#/components/schemas/StringType"
          },
          "idBase": {
            "type": "string"
          },
          "booleanPrimitive": {
            "type": "boolean"
          },
          "dateTime": {
            "type": "boolean"
          },
          "primitive": {
            "type": "boolean"
          },
          "resource": {
            "type": "boolean"
          }
        }
      },
      "IPrimitiveTypeObject": {
        "type": "object",
        "properties": {
          "valueAsString": {
            "type": "string"
          },
          "value": {
            "type": "object"
          },
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "IdType": {
        "type": "object",
        "properties": {
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "extension": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extension"
            }
          },
          "disallowExtensions": {
            "type": "boolean"
          },
          "local": {
            "type": "boolean"
          },
          "versionIdPartAsLong": {
            "type": "integer",
            "format": "int64"
          },
          "versionIdPartValidLong": {
            "type": "boolean"
          },
          "idPartAsBigDecimal": {
            "type": "number"
          },
          "idPart": {
            "type": "string"
          },
          "idPartAsLong": {
            "type": "integer",
            "format": "int64"
          },
          "valueAsString": {
            "type": "string"
          },
          "versionIdPart": {
            "type": "string"
          },
          "urn": {
            "type": "boolean"
          },
          "idPartValidLong": {
            "type": "boolean"
          },
          "idPartValid": {
            "type": "boolean"
          },
          "resourceType": {
            "type": "string"
          },
          "baseUrl": {
            "type": "string"
          },
          "empty": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          },
          "absolute": {
            "type": "boolean"
          },
          "primitive": {
            "type": "boolean"
          },
          "extensionFirstRep": {
            "$ref": "#/components/schemas/Extension"
          },
          "idElement": {
            "$ref": "#/components/schemas/StringType"
          },
          "idBase": {
            "type": "string"
          },
          "booleanPrimitive": {
            "type": "boolean"
          },
          "dateTime": {
            "type": "boolean"
          },
          "resource": {
            "type": "boolean"
          }
        }
      },
      "InstantType": {
        "type": "object",
        "properties": {
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "extension": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extension"
            }
          },
          "disallowExtensions": {
            "type": "boolean"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "type": "integer",
            "format": "int32"
          },
          "day": {
            "type": "integer",
            "format": "int32"
          },
          "millis": {
            "type": "integer",
            "format": "int32"
          },
          "timeZone": {
            "type": "object",
            "properties": {
              "rawOffset": {
                "type": "integer",
                "format": "int32"
              },
              "dstsavings": {
                "type": "integer",
                "format": "int32"
              },
              "id": {
                "type": "string"
              },
              "displayName": {
                "type": "string"
              }
            }
          },
          "precision": {
            "type": "string",
            "enum": [
              "YEAR",
              "MONTH",
              "DAY",
              "MINUTE",
              "SECOND",
              "MILLI"
            ]
          },
          "valueAsString": {
            "type": "string"
          },
          "timeZoneZulu": {
            "type": "boolean"
          },
          "today": {
            "type": "boolean"
          },
          "hour": {
            "type": "integer",
            "format": "int32"
          },
          "minute": {
            "type": "integer",
            "format": "int32"
          },
          "second": {
            "type": "integer",
            "format": "int32"
          },
          "valueAsV3String": {
            "type": "string",
            "writeOnly": true
          },
          "valueAsCalendar": {
            "type": "string",
            "format": "date-time"
          },
          "dateTime": {
            "type": "boolean"
          },
          "nanos": {
            "type": "integer",
            "format": "int64"
          },
          "value": {
            "type": "string",
            "format": "date-time"
          },
          "primitive": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          },
          "extensionFirstRep": {
            "$ref": "#/components/schemas/Extension"
          },
          "idElement": {
            "$ref": "#/components/schemas/StringType"
          },
          "idBase": {
            "type": "string"
          },
          "booleanPrimitive": {
            "type": "boolean"
          },
          "resource": {
            "type": "boolean"
          }
        }
      },
      "Location": {
        "type": "object",
        "properties": {
          "line": {
            "type": "integer",
            "format": "int32"
          },
          "column": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Meta": {
        "type": "object",
        "properties": {
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "extension": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extension"
            }
          },
          "disallowExtensions": {
            "type": "boolean"
          },
          "versionId": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "source": {
            "type": "string"
          },
          "profile": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CanonicalType"
            }
          },
          "security": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coding"
            }
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coding"
            }
          },
          "lastUpdatedElement": {
            "$ref": "#/components/schemas/InstantType"
          },
          "securityFirstRep": {
            "$ref": "#/components/schemas/Coding"
          },
          "versionIdElement": {
            "$ref": "#/components/schemas/IdType"
          },
          "sourceElement": {
            "$ref": "#/components/schemas/UriType"
          },
          "tagFirstRep": {
            "$ref": "#/components/schemas/Coding"
          },
          "empty": {
            "type": "boolean"
          },
          "extensionFirstRep": {
            "$ref": "#/components/schemas/Extension"
          },
          "idElement": {
            "$ref": "#/components/schemas/StringType"
          },
          "idBase": {
            "type": "string"
          },
          "booleanPrimitive": {
            "type": "boolean"
          },
          "dateTime": {
            "type": "boolean"
          },
          "primitive": {
            "type": "boolean"
          },
          "resource": {
            "type": "boolean"
          }
        }
      },
      "Narrative": {
        "type": "object",
        "properties": {
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "extension": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extension"
            }
          },
          "disallowExtensions": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "GENERATED",
              "EXTENSIONS",
              "ADDITIONAL",
              "EMPTY",
              "NULL"
            ]
          },
          "div": {
            "$ref": "#/components/schemas/XhtmlNode"
          },
          "statusElement": {
            "$ref": "#/components/schemas/EnumerationNarrativeStatus"
          },
          "empty": {
            "type": "boolean"
          },
          "divAsString": {
            "type": "string"
          },
          "statusAsString": {
            "type": "string"
          },
          "extensionFirstRep": {
            "$ref": "#/components/schemas/Extension"
          },
          "idElement": {
            "$ref": "#/components/schemas/StringType"
          },
          "idBase": {
            "type": "string"
          },
          "booleanPrimitive": {
            "type": "boolean"
          },
          "dateTime": {
            "type": "boolean"
          },
          "primitive": {
            "type": "boolean"
          },
          "resource": {
            "type": "boolean"
          }
        }
      },
      "Resource": {
        "type": "object",
        "properties": {
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "implicitRules": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "Account",
              "ActivityDefinition",
              "AdverseEvent",
              "AllergyIntolerance",
              "Appointment",
              "AppointmentResponse",
              "AuditEvent",
              "Basic",
              "Binary",
              "BiologicallyDerivedProduct",
              "BodyStructure",
              "Bundle",
              "CapabilityStatement",
              "CarePlan",
              "CareTeam",
              "CatalogEntry",
              "ChargeItem",
              "ChargeItemDefinition",
              "Claim",
              "ClaimResponse",
              "ClinicalImpression",
              "CodeSystem",
              "Communication",
              "CommunicationRequest",
              "CompartmentDefinition",
              "Composition",
              "ConceptMap",
              "Condition",
              "Consent",
              "Contract",
              "Coverage",
              "CoverageEligibilityRequest",
              "CoverageEligibilityResponse",
              "DetectedIssue",
              "Device",
              "DeviceDefinition",
              "DeviceMetric",
              "DeviceRequest",
              "DeviceUseStatement",
              "DiagnosticReport",
              "DocumentManifest",
              "DocumentReference",
              "EffectEvidenceSynthesis",
              "Encounter",
              "Endpoint",
              "EnrollmentRequest",
              "EnrollmentResponse",
              "EpisodeOfCare",
              "EventDefinition",
              "Evidence",
              "EvidenceVariable",
              "ExampleScenario",
              "ExplanationOfBenefit",
              "FamilyMemberHistory",
              "Flag",
              "Goal",
              "GraphDefinition",
              "Group",
              "GuidanceResponse",
              "HealthcareService",
              "ImagingStudy",
              "Immunization",
              "ImmunizationEvaluation",
              "ImmunizationRecommendation",
              "ImplementationGuide",
              "InsurancePlan",
              "Invoice",
              "Library",
              "Linkage",
              "List",
              "Location",
              "Measure",
              "MeasureReport",
              "Media",
              "Medication",
              "MedicationAdministration",
              "MedicationDispense",
              "MedicationKnowledge",
              "MedicationRequest",
              "MedicationStatement",
              "MedicinalProduct",
              "MedicinalProductAuthorization",
              "MedicinalProductContraindication",
              "MedicinalProductIndication",
              "MedicinalProductIngredient",
              "MedicinalProductInteraction",
              "MedicinalProductManufactured",
              "MedicinalProductPackaged",
              "MedicinalProductPharmaceutical",
              "MedicinalProductUndesirableEffect",
              "MessageDefinition",
              "MessageHeader",
              "MolecularSequence",
              "NamingSystem",
              "NutritionOrder",
              "Observation",
              "ObservationDefinition",
              "OperationDefinition",
              "OperationOutcome",
              "Organization",
              "OrganizationAffiliation",
              "Parameters",
              "Patient",
              "PaymentNotice",
              "PaymentReconciliation",
              "Person",
              "PlanDefinition",
              "Practitioner",
              "PractitionerRole",
              "Procedure",
              "Provenance",
              "Questionnaire",
              "QuestionnaireResponse",
              "RelatedPerson",
              "RequestGroup",
              "ResearchDefinition",
              "ResearchElementDefinition",
              "ResearchStudy",
              "ResearchSubject",
              "RiskAssessment",
              "RiskEvidenceSynthesis",
              "Schedule",
              "SearchParameter",
              "ServiceRequest",
              "Slot",
              "Specimen",
              "SpecimenDefinition",
              "StructureDefinition",
              "StructureMap",
              "Subscription",
              "Substance",
              "SubstanceNucleicAcid",
              "SubstancePolymer",
              "SubstanceProtein",
              "SubstanceReferenceInformation",
              "SubstanceSourceMaterial",
              "SubstanceSpecification",
              "SupplyDelivery",
              "SupplyRequest",
              "Task",
              "TerminologyCapabilities",
              "TestReport",
              "TestScript",
              "ValueSet",
              "VerificationResult",
              "VisionPrescription"
            ]
          },
          "idElement": {
            "$ref": "#/components/schemas/IdType"
          },
          "idBase": {
            "type": "string"
          },
          "languageElement": {
            "$ref": "#/components/schemas/CodeType"
          },
          "implicitRulesElement": {
            "$ref": "#/components/schemas/UriType"
          },
          "empty": {
            "type": "boolean"
          },
          "structureFhirVersionEnum": {
            "type": "string",
            "enum": [
              "DSTU2",
              "DSTU2_HL7ORG",
              "DSTU2_1",
              "DSTU3",
              "R4",
              "R5"
            ]
          },
          "resource": {
            "type": "boolean"
          },
          "booleanPrimitive": {
            "type": "boolean"
          },
          "dateTime": {
            "type": "boolean"
          },
          "primitive": {
            "type": "boolean"
          }
        }
      },
      "StringType": {
        "type": "object",
        "properties": {
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "disallowExtensions": {
            "type": "boolean"
          },
          "valueNotNull": {
            "type": "string"
          },
          "valueAsString": {
            "type": "string"
          },
          "primitive": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          },
          "extensionFirstRep": {
            "$ref": "#/components/schemas/Extension"
          },
          "idElement": {
            "$ref": "#/components/schemas/StringType"
          },
          "idBase": {
            "type": "string"
          },
          "booleanPrimitive": {
            "type": "boolean"
          },
          "dateTime": {
            "type": "boolean"
          },
          "resource": {
            "type": "boolean"
          }
        }
      },
      "Type": {
        "type": "object",
        "properties": {
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "disallowExtensions": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          },
          "extensionFirstRep": {
            "$ref": "#/components/schemas/Extension"
          },
          "idElement": {
            "$ref": "#/components/schemas/StringType"
          },
          "idBase": {
            "type": "string"
          },
          "booleanPrimitive": {
            "type": "boolean"
          },
          "dateTime": {
            "type": "boolean"
          },
          "primitive": {
            "type": "boolean"
          },
          "resource": {
            "type": "boolean"
          }
        }
      },
      "UriType": {
        "type": "object",
        "properties": {
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "disallowExtensions": {
            "type": "boolean"
          },
          "valueAsString": {
            "type": "string"
          },
          "primitive": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          },
          "extensionFirstRep": {
            "$ref": "#/components/schemas/Extension"
          },
          "idElement": {
            "$ref": "#/components/schemas/StringType"
          },
          "idBase": {
            "type": "string"
          },
          "booleanPrimitive": {
            "type": "boolean"
          },
          "dateTime": {
            "type": "boolean"
          },
          "resource": {
            "type": "boolean"
          }
        }
      },
      "XhtmlNode": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "nodeType": {
            "type": "string",
            "enum": [
              "Element",
              "Text",
              "Comment",
              "DocType",
              "Document",
              "Instruction"
            ]
          },
          "name": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "childNodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XhtmlNode"
            }
          },
          "content": {
            "type": "string"
          },
          "valueAsString": {
            "type": "string"
          },
          "para": {
            "type": "boolean"
          },
          "firstElement": {
            "$ref": "#/components/schemas/XhtmlNode"
          },
          "noPretty": {
            "type": "boolean"
          },
          "nsDecl": {
            "type": "string"
          },
          "formatCommentsPre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formatCommentsPost": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "empty": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "CohortCandidate": {
        "type": "object",
        "properties": {
          "patUID": {
            "type": "string"
          },
          "inclusion": {
            "type": "string",
            "enum": [
              "UNJUDGED",
              "INCLUDE",
              "EXCLUDE"
            ]
          }
        }
      }
    }
  }
}